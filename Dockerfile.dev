# Development Dockerfile for SignUpFlow
# Single-stage build with all development dependencies
# Optimized for fast rebuilds and hot-reload

FROM python:3.11-slim

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    POETRY_VERSION=1.7.1 \
    POETRY_HOME="/opt/poetry" \
    POETRY_NO_INTERACTION=1 \
    POETRY_VIRTUALENVS_CREATE=false \
    PORT=8000 \
    HOST=0.0.0.0 \
    ENVIRONMENT=development

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    build-essential \
    libpq-dev \
    git \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN curl -sSL https://install.python-poetry.org | python3 - \
    && ln -s /opt/poetry/bin/poetry /usr/local/bin/poetry

# Set working directory
WORKDIR /app

# Copy dependency files first (for better caching)
COPY pyproject.toml poetry.lock* ./

# Install ALL dependencies (including dev dependencies)
RUN poetry install --no-root

# Copy application code
COPY api/ ./api/
COPY frontend/ ./frontend/
COPY locales/ ./locales/
COPY alembic/ ./alembic/
COPY alembic.ini ./
COPY tests/ ./tests/

# Install the application
RUN poetry install

# Create directories for data persistence
RUN mkdir -p /app/data /app/logs

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=10s --timeout=5s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Default command - run with uvicorn in dev mode (with auto-reload)
# Note: This can be overridden in docker-compose.dev.yml
CMD ["uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload", "--log-level", "debug"]
