# Docker Compose for SignUpFlow - DEVELOPMENT ENVIRONMENT
# Includes PostgreSQL, Redis, and API with hot-reload
# Usage: docker-compose -f docker-compose.dev.yml up

services:
  # ============================================================================
  # PostgreSQL Database (Development)
  # ============================================================================
  db:
    image: postgres:16-alpine
    container_name: signupflow-dev-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-signupflow_dev}
      POSTGRES_USER: ${POSTGRES_USER:-signupflow}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev_password_change_in_production}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./backups:/backups  # For database backups
    ports:
      - "${POSTGRES_PORT:-5433}:5432"  # Map to 5433 to avoid conflicts with local PostgreSQL
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-signupflow} -d ${POSTGRES_DB:-signupflow_dev}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - signupflow-dev-network

  # ============================================================================
  # Redis (for caching, rate limiting, sessions)
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: signupflow-dev-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-dev_redis_password} --appendonly yes
    volumes:
      - redis_dev_data:/data
    ports:
      - "${REDIS_PORT:-6380}:6379"  # Map to 6380 to avoid conflicts with local Redis
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - signupflow-dev-network

  # ============================================================================
  # SignUpFlow FastAPI Backend (Development with Hot-Reload)
  # ============================================================================
  api:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: signupflow-dev-api
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-signupflow}:${POSTGRES_PASSWORD:-dev_password_change_in_production}@db:5432/${POSTGRES_DB:-signupflow_dev}

      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-dev_redis_password}@redis:6379/0

      # Application Configuration
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-change-in-production-min-32-chars}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_HOURS: ${ACCESS_TOKEN_EXPIRE_HOURS:-24}
      API_BASE_URL: ${API_BASE_URL:-http://localhost:8000}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:8000}
      APP_URL: ${APP_URL:-http://localhost:8000}

      # Environment
      ENVIRONMENT: development
      LOG_LEVEL: ${LOG_LEVEL:-DEBUG}
      TESTING: ${TESTING:-false}

      # Email Configuration (Mailtrap for dev)
      MAILTRAP_SMTP_HOST: ${MAILTRAP_SMTP_HOST:-sandbox.smtp.mailtrap.io}
      MAILTRAP_SMTP_PORT: ${MAILTRAP_SMTP_PORT:-2525}
      MAILTRAP_SMTP_USER: ${MAILTRAP_SMTP_USER}
      MAILTRAP_SMTP_PASSWORD: ${MAILTRAP_SMTP_PASSWORD}
      EMAIL_FROM: ${EMAIL_FROM:-noreply@signupflow.local}
      EMAIL_FROM_NAME: ${EMAIL_FROM_NAME:-SignUpFlow Dev}
      EMAIL_ENABLED: ${EMAIL_ENABLED:-true}

      # SMS Configuration (Twilio test credentials)
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_PHONE_NUMBER: ${TWILIO_PHONE_NUMBER:-+15005550006}
      SMS_ENABLED: ${SMS_ENABLED:-true}

      # Stripe Configuration (test mode)
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      STRIPE_TEST_MODE: ${STRIPE_TEST_MODE:-true}

      # reCAPTCHA Configuration (optional for dev)
      RECAPTCHA_SITE_KEY: ${RECAPTCHA_SITE_KEY}
      RECAPTCHA_SECRET_KEY: ${RECAPTCHA_SECRET_KEY}

      # Rate Limiting Configuration
      RATE_LIMITING_ENABLED: ${RATE_LIMITING_ENABLED:-true}
      RATE_LIMIT_SIGNUP_MAX: ${RATE_LIMIT_SIGNUP_MAX:-5}
      RATE_LIMIT_SIGNUP_WINDOW: ${RATE_LIMIT_SIGNUP_WINDOW:-3600}
      RATE_LIMIT_LOGIN_MAX: ${RATE_LIMIT_LOGIN_MAX:-10}
      RATE_LIMIT_LOGIN_WINDOW: ${RATE_LIMIT_LOGIN_WINDOW:-300}

      # Feature Flags
      SESSION_TTL_HOURS: ${SESSION_TTL_HOURS:-24}

      # Monitoring (Sentry disabled in dev)
      SENTRY_DSN: ${SENTRY_DSN:-}

    ports:
      - "${PORT:-8000}:8000"
    volumes:
      # Hot-reload: Mount source code
      - ./api:/app/api
      - ./frontend:/app/frontend
      - ./locales:/app/locales
      - ./alembic:/app/alembic
      - ./alembic.ini:/app/alembic.ini
      - ./tests:/app/tests

      # Persistent data
      - ./data:/app/data
      - ./logs:/app/logs

      # Don't mount these (keep container versions)
      # - ./pyproject.toml:/app/pyproject.toml
      # - ./poetry.lock:/app/poetry.lock

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - signupflow-dev-network

    # Override CMD for development with auto-reload
    command: uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload --log-level debug

# ============================================================================
# Volumes (persistent data storage)
# ============================================================================
volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local

# ============================================================================
# Networks
# ============================================================================
networks:
  signupflow-dev-network:
    driver: bridge
