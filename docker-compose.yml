# Docker Compose for SignUpFlow
# Production-ready configuration with PostgreSQL, Redis, and FastAPI

services:
  # ============================================================================
  # PostgreSQL Database
  # ============================================================================
  db:
    image: postgres:16-alpine
    container_name: signupflow-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-signupflow}
      POSTGRES_USER: ${POSTGRES_USER:-signupflow}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme_in_production}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups  # For database backups
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-signupflow} -d ${POSTGRES_DB:-signupflow}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - signupflow-network

  # ============================================================================
  # Redis (for caching, rate limiting, sessions)
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: signupflow-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-changeme_in_production} --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - signupflow-network

  # ============================================================================
  # SignUpFlow FastAPI Backend
  # ============================================================================
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: signupflow-api
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-signupflow}:${POSTGRES_PASSWORD:-changeme_in_production}@db:5432/${POSTGRES_DB:-signupflow}

      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme_in_production}@redis:6379/0

      # Application Configuration
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-min-32-chars-CHANGE-IN-PRODUCTION}
      JWT_ALGORITHM: HS256
      JWT_EXPIRE_HOURS: ${JWT_EXPIRE_HOURS:-24}
      API_BASE_URL: ${API_BASE_URL:-http://localhost:8000}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:8000}

      # Email Configuration (SendGrid)
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      FROM_EMAIL: ${FROM_EMAIL:-noreply@signupflow.io}
      EMAIL_ENABLED: ${EMAIL_ENABLED:-true}

      # SMS Configuration (Twilio)
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_PHONE_NUMBER: ${TWILIO_PHONE_NUMBER}
      SMS_ENABLED: ${SMS_ENABLED:-true}

      # Stripe Configuration
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}

      # Feature Flags
      RATE_LIMITING_ENABLED: ${RATE_LIMITING_ENABLED:-true}

      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}

    ports:
      - "${PORT:-8000}:8000"
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - signupflow-network

  # ============================================================================
  # Celery Worker (for background tasks - optional, future use)
  # ============================================================================
  # celery:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: signupflow-celery
  #   restart: unless-stopped
  #   command: celery -A api.celery_app worker --loglevel=info
  #   depends_on:
  #     - redis
  #     - db
  #   environment:
  #     DATABASE_URL: postgresql://${POSTGRES_USER:-signupflow}:${POSTGRES_PASSWORD:-changeme_in_production}@db:5432/${POSTGRES_DB:-signupflow}
  #     REDIS_URL: redis://:${REDIS_PASSWORD:-changeme_in_production}@redis:6379/0
  #   networks:
  #     - signupflow-network

# ============================================================================
# Volumes (persistent data storage)
# ============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# ============================================================================
# Networks
# ============================================================================
networks:
  signupflow-network:
    driver: bridge
